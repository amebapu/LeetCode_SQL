Given a table tree, id is identifier of the tree node and p_id is its parent node's id.

+----+------+
| id | p_id |
+----+------+
| 1  | null |
| 2  | 1    |
| 3  | 1    |
| 4  | 2    |
| 5  | 2    |
+----+------+
Each node in the tree can be one of three types:
Leaf: if the node is a leaf node.
Root: if the node is the root of the tree.
Inner: If the node is neither a leaf node nor a root node.
 

Write a query to print the node id and the type of the node. Sort your output by the node id. The result for the above sample is:
 

+----+------+
| id | Type |
+----+------+
| 1  | Root |
| 2  | Inner|
| 3  | Leaf |
| 4  | Leaf |
| 5  | Leaf |
+----+------+
 

Explanation

 

Node '1' is root node, because its parent node is NULL and it has child node '2' and '3'.
Node '2' is inner node, because it has parent node '1' and child node '4' and '5'.
Node '3', '4' and '5' is Leaf node, because they have parent node and they don't have child node.

And here is the image of the sample tree as below:
 

			  1
			/   \
                      2       3
                    /   \
                  4       5
Note

If there is only one node on the tree, you only need to output its root attributes.




Solution1:

# Write your MySQL query statement below
select id,
case 
    when p_id is null then 'Root' 
    when id in (select p_id from tree where p_id is not null) then 'Inner'
    else 'Leaf'
    end as Type
from tree


Solution2:

# Write your MySQL query statement below
select id,
if(p_id is null, 'Root', if(id in (select p_id from tree where p_id is not null), 'Inner', 'Leaf')) as Type
from tree

两个办法做，（其实还有第三种，把每个情况都select出来，最后union在一起，太煞笔了，就不写了）一个是case when的条件，当p_id是null的时候
肯定就是root，然后当id出现在p_id里面的时候，说明就是别人的parent，又不是root，那么就是inner，最后其他情况就是leaf；
if和case when的逻辑都是一样的，不过写法不同而已，if是在一个if里面再加上一个if，有点类似于分类器，我们一次只分两种情况，那么就先把
inner和leaf打包，最后再拆解这两种情况，和decision tree里面道理一样；
